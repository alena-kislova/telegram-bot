# Импорт стандартных библиотек
import os  # Для работы с переменными окружения
import random  # Для выбора случайной шутки

# Импортируем необходимые классы из python-telegram-bot
from telegram import Update  # Класс для представления входящих сообщений
from telegram.ext import ApplicationBuilder, ContextTypes, MessageHandler, filters  # Для создания и настройки бота

# Список шуток, из которых бот будет выбирать случайную
JOKES = [
    "Почему программисты путают Хэллоуин и Рождество? Потому что 31 OCT = 25 DEC!",
    "Быть программистом — это как быть волшебником, только заклинания чаще не работают.",
    "Сколько программистов нужно, чтобы вкрутить лампочку? Ни одного, это аппаратная проблема!",
    "Я бы рассказал тебе шутку про рекурсию, но ты бы не понял... пока не поймёшь!",
    "Программисты не спят, они ждут, пока что-то скомпилируется."
]

# Эта функция будет вызываться каждый раз, когда пользователь отправляет текстовое сообщение
async def joke_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Выбираем случайную шутку из списка
    joke = random.choice(JOKES)
    # Отправляем выбранную шутку в ответ пользователю
    await update.message.reply_text(joke)

# Точка входа в программу
if __name__ == "__main__":
    # Получаем токен бота из переменной окружения TELEGRAM_TOKEN
    token = os.getenv("TELEGRAM_TOKEN")
    # Если токен не найден, выводим сообщение об ошибке и завершаем программу
    if not token:
        print("Пожалуйста, укажите токен в переменной окружения TELEGRAM_TOKEN.")
        exit(1)
    # Создаём приложение (бота) с помощью токена
    app = ApplicationBuilder().token(token).build()
    # Добавляем обработчик сообщений: на любое текстовое сообщение (кроме команд) вызывается joke_handler
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, joke_handler))
    # Сообщаем в консоль, что бот запущен
    print("Бот запущен!")
    # Запускаем бота: он будет ждать и обрабатывать входящие сообщения
    app.run_polling() 